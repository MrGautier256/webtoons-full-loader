manifest.json
{
  "manifest_version": 3,
  "name": "Webtoons Full Loader",
  "description": "Fully loads pages on Webtoons.",
  "version": "1.6",
  "permissions": ["storage"],
  "host_permissions": ["https://www.webtoons.com/*"],
  "action": {
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    },
    "default_title": "Webtoons Full Loader",
    "default_popup": "popup/popup.html"
  },
  "content_scripts": [
    {
      "matches": ["https://www.webtoons.com/*"],
      "js": ["scripts/contentScript.js"],
      "run_at": "document_end"
    }
  ],
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png",
    "256": "icons/icon256.png"
  },
  "web_accessible_resources": [
    {
      "resources": ["styles/dark-mode.css"],
      "matches": ["https://www.webtoons.com/*"]
    }
  ]
}


privacy_policy.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Privacy Policy - Webtoons Full Loader</title>
</head>

<body>
    <h1>Privacy Policy</h1>
    <p>This privacy policy describes how the "Webtoons Full Loader" extension ("the Extension") handles user data.</p>

    <h2>Data Collection</h2>
    <p>The Extension does not collect, store, or transmit any personal data from users. The only data handled by the
        Extension is stored locally in your browser's storage to enable the extension's functionality, such as
        remembering the enable/disable state. No information is transmitted to any external server.</p>

    <h2>Permissions</h2>
    <p>The Extension requires the following permissions:</p>
    <ul>
        <li><strong>Access to Webtoons</strong>: This is necessary for the Extension to function on the Webtoons website
            (<code>https://www.webtoons.com/</code>). No personal data from Webtoons is collected or shared.</li>
        <li><strong>Storage</strong>: The Extension uses browser storage to remember your preference for enabling or
            disabling the Extension.</li>
    </ul>

    <h2>Third-Party Services</h2>
    <p>The Extension does not use any third-party services, analytics, or tracking systems.</p>

    <h2>Changes to this Privacy Policy</h2>
    <p>This Privacy Policy may be updated occasionally to reflect changes in functionality or legal requirements. Users
        will be notified of any significant changes through updates to the Extension.</p>

    <h2>Contact</h2>
    <p>If you have any questions or concerns regarding this privacy policy, you can contact the developer at <a
            href="mailto:mrgautier256.contact@gmail.com.">mrgautier256.contact@gmail.com.</a>.</p>
</body>

</html>

README.md
# Webtoons Full Loader

## English

### Description

**Webtoons Full Loader** is a browser extension for Chromium-based browsers (like Chrome and Opera) that enhances your reading experience on Webtoon. It preloads entire chapters automatically and includes a Dark Mode feature to reduce eye strain during reading.

### Features

- **Auto Load**: Automatically loads all Webtoon chapter content without requiring scrolling.
- **Dark Mode**: Applies a dark theme to the Webtoons interface for a more comfortable reading experience, especially at night.
- **Enable/Disable Features Independently**: You can easily enable or disable **Auto Load** and **Dark Mode** independently via the extension's popup.

### Installation

1. **Download or clone** this repository to your local machine.

2. **Open your browser** (Chrome or Opera).

3. **Enable developer mode**:

   - For Chrome: Go to `chrome://extensions/` and toggle the developer mode switch at the top right.
   - For Opera: Go to `opera://extensions` and check "Developer mode" at the top right.

4. **Load the unpacked extension**:
   - Click on "Load unpacked" (Chrome) or "Load unpacked extension" (Opera).
   - Select the `webtoons-full-loader` folder that you downloaded.

### Usage

- **Enable/Disable Features**:

  - Click on the extension icon in the browser toolbar.
  - Use the sliders to enable or disable **Auto Load** and **Dark Mode** independently.

- **Reading on Webtoons**:
  - Visit `https://www.webtoons.com/` and open a chapter.
  - If **Auto Load** is enabled, the page will automatically load all the content without manual scrolling.
  - If **Dark Mode** is enabled, a dark theme will be applied immediately.

---

## Français

### Description

**Webtoons Full Loader** est une extension de navigateur pour les navigateurs basés sur Chromium (comme Chrome et Opera) qui améliore votre expérience de lecture sur Webtoon. Elle précharge automatiquement l'intégralité des chapitres et offre une fonctionnalité de mode sombre pour réduire la fatigue oculaire.

### Fonctionnalités

- **Chargement Automatique** : Charge automatiquement tout le contenu d'un chapitre Webtoon sans défilement manuel.
- **Mode Sombre** : Applique un thème sombre à l'interface de Webtoons pour une lecture plus confortable, surtout la nuit.
- **Activation Indépendante** : Vous pouvez activer ou désactiver le **Chargement Automatique** et le **Mode Sombre** indépendamment via le popup de l'extension.

### Installation

1. **Téléchargez ou clonez** ce dépôt sur votre machine locale.

2. **Ouvrez votre navigateur** (Chrome ou Opera).

3. **Activez le mode développeur** :

   - Pour Chrome : Accédez à `chrome://extensions/` et activez le bouton du mode développeur en haut à droite.
   - Pour Opera : Accédez à `opera://extensions` et cochez "Mode développeur" en haut à droite.

4. **Chargez l'extension décompressée** :
   - Cliquez sur "Charger l'extension non empaquetée" (Chrome) ou "Charger l'extension décompressée" (Opera).
   - Sélectionnez le dossier `webtoons-full-loader` que vous avez téléchargé.

### Utilisation

- **Activer/Désactiver les Fonctionnalités** :

  - Cliquez sur l'icône de l'extension dans la barre d'outils du navigateur.
  - Utilisez les interrupteurs pour activer ou désactiver indépendamment le **Chargement Automatique** et le **Mode Sombre**.

- **Lecture sur Webtoons** :
  - Rendez-vous sur `https://www.webtoons.com/` et ouvrez un chapitre.
  - Si le **Chargement Automatique** est activé, la page se chargera automatiquement.
  - Si le **Mode Sombre** est activé, un thème sombre sera appliqué immédiatement.


tree1.py
import os

# Liste des fichiers et dossiers à ignorer
ignored_files = ['Questions-Jour2.md', 'tree.py', 'output.txt', 'LICENSE', '.gitignore']  # Remplace par les fichiers que tu veux ignorer
ignored_dirs = ['__pycache__', 'front', 'api', 'icons', '.git']  # Remplace par les dossiers que tu veux ignorer

def list_files_recursively(directory, output_file):
    with open(output_file, 'w', encoding='utf-8') as f_out:
        for root, dirs, files in os.walk(directory):
            # Ignore les dossiers spécifiés
            dirs[:] = [d for d in dirs if d not in ignored_dirs]
            
            for file in files:
                # Ignore les fichiers spécifiés
                if file not in ignored_files:
                    relative_path = os.path.relpath(os.path.join(root, file), directory)
                    f_out.write(f"{relative_path}\n")
                    
                    # Lire et écrire le contenu du fichier
                    try:
                        with open(os.path.join(root, file), 'r', encoding='utf-8') as f_in:
                            content = f_in.read()
                            f_out.write(f"{content}\n\n")
                    except Exception as e:
                        f_out.write(f"Erreur de lecture du fichier: {e}\n\n")
                        

# Exécution du script
if __name__ == "__main__":
    current_dir = os.getcwd()  # Récupère le dossier courant
    output_filename = "output.txt"  # Nom du fichier de sortie
    list_files_recursively(current_dir, output_filename)


popup\popup.html
<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Webtoons Full Loader</title>
</head>

<body>
  <div class="switch-container">
    <label>Auto Load</label>
    <label class="switch">
      <input type="checkbox" id="toggleAutoLoad" />
      <span class="slider"></span>
    </label>
  </div>

  <div class="switch-container">
    <label>Dark Mode</label>
    <label class="switch">
      <input type="checkbox" id="toggleDarkMode" />
      <span class="slider"></span>
    </label>
  </div>

  <div class="brightness-container">
    <label>Image brightness</label>
    <input type="range" id="brightnessSlider" min="25" max="125" value="100">
    <span id="brightnessValue">100%</span>
  </div>

  <script src="../scripts/popup.js"></script>
</body>


<style>
  body {
    font-family: Arial, sans-serif;
    background-color: #f5f5f5;
    color: #333;
    min-width: 275px;
    padding: 20px;
    border-radius: 8px;
  }

  .switch-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 10px;
  }

  .switch {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 24px;
  }

  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: 0.4s;
    border-radius: 24px;
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 20px;
    width: 20px;
    left: 2px;
    bottom: 2px;
    background-color: white;
    transition: 0.4s;
    border-radius: 50%;
  }

  input:checked+.slider {
    background-color: #4caf50;
  }

  input:checked+.slider:before {
    transform: translateX(26px);
  }

  /* Style for the brightness slider */
  .brightness-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 20px;
  }

  #brightnessSlider {
    -webkit-appearance: none;
    width: 100%;
    height: 8px;
    background: #ddd;
    outline: none;
    border-radius: 5px;
    transition: background 0.3s;
  }

  #brightnessSlider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    background: #4caf50;
    border-radius: 50%;
    cursor: pointer;
  }

  #brightnessValue {
    margin-left: 10px;
    font-size: 14px;
    color: #555;
  }
</style>

</html>

scripts\contentScript.js
(function () {
  // Fonction pour appliquer le mode sombre
  function applyDarkMode(isEnabled) {
    let existingLink = document.getElementById("dark-mode-link");
    if (isEnabled) {
      if (!existingLink) {
        const link = document.createElement("link");
        link.id = "dark-mode-link";
        link.rel = "stylesheet";
        link.href = chrome.runtime.getURL("styles/dark-mode.css"); // Chemin vers ton fichier CSS
        document.head.appendChild(link);
      }
    } else if (existingLink) {
      existingLink.remove();
    }
  }

  // Fonction pour appliquer la luminosité aux images
  function applyBrightness(brightness) {
    const images = document.querySelectorAll(".viewer_img img");
    images.forEach((image) => {
      image.style.filter = `brightness(${brightness}%)`;
    });
  }

  // Fonction pour précharger toutes les images de la page avec un délai
  function preloadImages() {
    const images = document.querySelectorAll("img._images"); // Sélectionne toutes les images avec la classe _images
    images.forEach((image, index) => {
      const src = image.getAttribute("data-url"); // Récupère l'URL réelle de l'image
      if (src) {
        // Précharge progressivement les images avec un léger délai entre chaque
        setTimeout(() => {
          const img = new Image();
          img.src = src; // Force le préchargement de l'image
        }, index * 500); // Chaque image est chargée avec un intervalle de 500ms
      }
    });
  }

  // Fonction pour auto-charger la page
  function applyAutoLoad(isEnabled) {
    if (isEnabled) {
      let lastHeight = document.body.scrollHeight;
      let timer = setInterval(function () {
        window.scrollTo(0, document.body.scrollHeight); // Défiler vers le bas
        let newHeight = document.body.scrollHeight;
        if (newHeight > lastHeight) {
          lastHeight = newHeight;
        } else {
          clearInterval(timer);
          window.scrollTo(0, 0); // Remonter en haut de la page après le chargement
        }
      }, 500);
    }
  }

  // Récupère les préférences depuis chrome.storage et applique les fonctionnalités
  chrome.storage.sync.get(
    ["autoLoad", "darkMode", "brightness"],
    function (result) {
      applyAutoLoad(result.autoLoad !== false); // Active l'auto-load si la préférence est activée
      applyDarkMode(result.darkMode === true); // Applique le mode sombre si activé
      applyBrightness(result.brightness || 100); // Applique la luminosité aux images

      // Délai avant de commencer à précharger les images pour permettre à l'utilisateur de lire le début
      setTimeout(() => {
        preloadImages(); // Précharge les images après un délai de 2 secondes
      }, 2000);
    }
  );

  // Écoute les changements dans chrome.storage pour réagir aux ajustements en direct
  chrome.storage.onChanged.addListener(function (changes) {
    if (changes.autoLoad) {
      applyAutoLoad(changes.autoLoad.newValue);
    }
    if (changes.darkMode) {
      applyDarkMode(changes.darkMode.newValue);
    }
    if (changes.brightness) {
      applyBrightness(changes.brightness.newValue);
    }
  });
})();


scripts\popup.js
const toggleAutoLoad = document.getElementById("toggleAutoLoad");
const toggleDarkMode = document.getElementById("toggleDarkMode");
const brightnessSlider = document.getElementById("brightnessSlider");
const brightnessValue = document.getElementById("brightnessValue");

chrome.storage.sync.get(
  ["autoLoad", "darkMode", "brightness"],
  function (result) {
    toggleAutoLoad.checked =
      result.autoLoad !== undefined ? result.autoLoad : true;
    toggleDarkMode.checked =
      result.darkMode !== undefined ? result.darkMode : false;
    brightnessSlider.value =
      result.brightness !== undefined ? result.brightness : 100;
    brightnessValue.textContent = `${brightnessSlider.value}%`; 
  }
);

toggleAutoLoad.addEventListener("change", function () {
  chrome.storage.sync.set({ autoLoad: toggleAutoLoad.checked });
});

toggleDarkMode.addEventListener("change", function () {
  chrome.storage.sync.set({ darkMode: toggleDarkMode.checked });
});

brightnessSlider.addEventListener("input", function () {
  const brightness = brightnessSlider.value;
  chrome.storage.sync.set({ brightness }); 
  brightnessValue.textContent = `${brightness}%`; 
});


styles\dark-mode.css
body,
.viewer_lst,
.viewer_img img,
.comment_section,
.suggestions_section,
.episode_area,
#notice_detail,
footer {
  background-color: #121212 !important;
  color: #e0e0e0 !important;
}
.viewer_img img {
  filter: none;
}
/* Correction de la couleur des liens */
a,
a:visited {
  color: #bb86fc !important;
}
/* Couleur des boutons */
button {
  background-color: #333 !important;
  color: #fff !important;
}
/* Forcer la couleur du texte dans les sections commentaires et suggestions */
.comment_area,
.comment_section,
.suggestions_section,
.comment_section,
.wcc_Editor__root * {
  color: #e0e0e0 !important;
  background-color: #1f1f1f !important;
}
/* Pour cibler directement le texte dans les commentaires et suggestions */
.comment_area p,
.suggestions_section p,
.comment_area span,
.suggestions_section span {
  color: #e0e0e0 !important;
}
/* Pour la zone episode_area */
.episode_area,
#bottomEpisodeList {
  background-color: #1f1f1f !important;
  color: #e0e0e0 !important;
}
/* Style pour le footer */
#footer {
  background-color: #222 !important; /* Fond sombre */
  color: #ccc !important; /* Texte clair */
}
#footer a {
  color: #00ccff !important; /* Liens en mode sombre */
}
.foot_cont .txt {
  color: #ccc !important; /* Texte clair pour les messages */
}
.foot_cont .btn_google,
.foot_cont .btn_ios {
  background-color: #333 !important; /* Boutons sombres */
  color: #fff !important; /* Texte des boutons en blanc */
}
.copyright,
.foot_logo {
  color: #ccc !important; /* Couleur du texte pour le copyright et logo */
}
.bar {
  color: #555 !important; /* Barre de séparation plus discrète */
}
/* Style pour la zone de notice */
.notice_area {
  background-color: #1f1f1f !important;
  color: #e0e0e0 !important;
}
.notice_area a,
.notice_area a:visited {
  color: #bb86fc !important; /* Liens de la zone de notice */
}
.notice_area .subj {
  color: #e0e0e0 !important; /* Texte de la notice */
}
.notice_area .date {
  color: #aaaaaa !important; /* Couleur de la date dans la notice */
}
/* Style pour .day_info et .dsc_encourage en mode sombre */
.day_info,
.dsc_encourage {
  color: #ffffff !important; /* Texte blanc */
}


