manifest.json
{
  "manifest_version": 3,
  "name": "Webtoons Full Loader",
  "description": "Fully loads pages on Webtoons.",
  "version": "1.1",
  "permissions": ["storage"],
  "host_permissions": ["https://www.webtoons.com/*"],
  "action": {
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    },
    "default_title": "Webtoons Full Loader",
    "default_popup": "popup/popup.html"
  },
  "content_scripts": [
    {
      "matches": ["https://www.webtoons.com/*"],
      "js": ["scripts/contentScript.js"],
      "run_at": "document_end"
    }
  ],
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png",
    "256": "icons/icon256.png"
  }
}


privacy_policy.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Privacy Policy - Webtoons Full Loader</title>
</head>

<body>
    <h1>Privacy Policy</h1>
    <p>This privacy policy describes how the "Webtoons Full Loader" extension ("the Extension") handles user data.</p>

    <h2>Data Collection</h2>
    <p>The Extension does not collect, store, or transmit any personal data from users. The only data handled by the
        Extension is stored locally in your browser's storage to enable the extension's functionality, such as
        remembering the enable/disable state. No information is transmitted to any external server.</p>

    <h2>Permissions</h2>
    <p>The Extension requires the following permissions:</p>
    <ul>
        <li><strong>Access to Webtoons</strong>: This is necessary for the Extension to function on the Webtoons website
            (<code>https://www.webtoons.com/</code>). No personal data from Webtoons is collected or shared.</li>
        <li><strong>Storage</strong>: The Extension uses browser storage to remember your preference for enabling or
            disabling the Extension.</li>
    </ul>

    <h2>Third-Party Services</h2>
    <p>The Extension does not use any third-party services, analytics, or tracking systems.</p>

    <h2>Changes to this Privacy Policy</h2>
    <p>This Privacy Policy may be updated occasionally to reflect changes in functionality or legal requirements. Users
        will be notified of any significant changes through updates to the Extension.</p>

    <h2>Contact</h2>
    <p>If you have any questions or concerns regarding this privacy policy, you can contact the developer at <a
            href="mailto:mrgautier256.contact@gmail.com.">mrgautier256.contact@gmail.com.</a>.</p>
</body>

</html>

README.md
# Webtoons Full Loader

## English

### Description

**Webtoons Full Loader** is a browser extension for Chromium-based browsers (like Chrome and Opera) that fully loads Webtoons pages without requiring manual scrolling. This enhances the reading experience by eliminating the wait time when scrolling.

### Features

- **Enable/Disable**: You can easily enable or disable the extension via the extension popup.
- **Optimized Loading**: The initial page is displayed quickly, and the remaining content is loaded in the background.
- **Simple Interface**: A minimal user interface for easy use.

### Installation

1. **Download or clone** this repository to your local machine.

2. **Open your browser** (Chrome or Opera).

3. **Enable developer mode**:

   - For Chrome: Go to `chrome://extensions/` and toggle the developer mode switch at the top right.
   - For Opera: Go to `opera://extensions` and check "Developer mode" at the top right.

4. **Load the unpacked extension**:
   - Click on "Load unpacked" (Chrome) or "Load unpacked extension" (Opera).
   - Select the `webtoons-full-loader` folder that you downloaded.

### Usage

- **Enable/Disable the Extension**:

  - Click on the extension icon in the browser toolbar.
  - Use the checkbox to enable or disable the extension.

- **Reading on Webtoons**:
  - Visit `https://www.webtoons.com/` and open a chapter.
  - The page will automatically load all the content without manual scrolling.

## Français

### Description

**Webtoons Full Loader** est une extension de navigateur pour les navigateurs basés sur Chromium (comme Chrome et Opera) qui permet de charger entièrement les pages de Webtoons sans avoir à faire défiler manuellement. Cela améliore l'expérience de lecture en éliminant les temps d'attente lors du défilement.

### Fonctionnalités

- **Activer/Désactiver** : Vous pouvez facilement activer ou désactiver l'extension via le popup de l'extension.
- **Chargement Optimisé** : La page initiale s'affiche rapidement, et le contenu restant se charge en arrière-plan.
- **Interface Simple** : Une interface utilisateur minimale pour une utilisation facile.

### Installation

1. **Téléchargez ou clonez** ce dépôt sur votre machine locale.

2. **Ouvrez votre navigateur** (Chrome ou Opera).

3. **Activez le mode développeur** :

   - Pour Chrome : Accédez à `chrome://extensions/` et activez le bouton du mode développeur en haut à droite.
   - Pour Opera : Accédez à `opera://extensions` et cochez "Mode développeur" en haut à droite.

4. **Chargez l'extension décompressée** :
   - Cliquez sur "Charger l'extension non empaquetée" (Chrome) ou "Charger l'extension décompressée" (Opera).
   - Sélectionnez le dossier `webtoons-full-loader` que vous avez téléchargé.

### Utilisation

- **Activer/Désactiver l'extension** :

  - Cliquez sur l'icône de l'extension dans la barre d'outils du navigateur.
  - Utilisez la case à cocher pour activer ou désactiver l'extension.

- **Lecture sur Webtoons** :
  - Rendez-vous sur `https://www.webtoons.com/` et ouvrez un chapitre.
  - La page se chargera automatiquement sans nécessiter de défilement manuel.


.git\COMMIT_EDITMSG
Upload Extension


.git\config
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[submodule]
	active = .
[remote "origin"]
	url = https://github.com/MrGautier256/webtoons-full-loader.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
	vscode-merge-base = origin/main
[lfs]
	repositoryformatversion = 0
[branch "Feat/Dark-mode"]
	remote = origin
	merge = refs/heads/Feat/Dark-mode
	vscode-merge-base = origin/main


.git\description
Unnamed repository; edit this file 'description' to name the repository.


.git\FETCH_HEAD
eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067		branch 'Feat/Dark-mode' of https://github.com/MrGautier256/webtoons-full-loader
eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067	not-for-merge	branch 'main' of https://github.com/MrGautier256/webtoons-full-loader


.git\HEAD
ref: refs/heads/Feat/Dark-mode


.git\index
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xdb in position 15: invalid continuation byte

.git\packed-refs
# pack-refs with: peeled fully-peeled sorted 
d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 refs/remotes/origin/main


.git\hooks\applypatch-msg.sample
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


.git\hooks\commit-msg.sample
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


.git\hooks\fsmonitor-watchman.sample
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


.git\hooks\post-update.sample
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


.git\hooks\pre-applypatch.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


.git\hooks\pre-commit.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


.git\hooks\pre-merge-commit.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


.git\hooks\pre-push.sample
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


.git\hooks\pre-rebase.sample
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


.git\hooks\pre-receive.sample
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


.git\hooks\prepare-commit-msg.sample
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


.git\hooks\push-to-checkout.sample
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi


.git\hooks\sendemail-validate.sample
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi


.git\hooks\update.sample
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


.git\info\exclude
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


.git\logs\HEAD
0000000000000000000000000000000000000000 d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 MrGautier256 <g.mekhelian@gmail.com> 1729064409 +0200	clone: from https://github.com/MrGautier256/webtoons-full-loader.git
d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 MrGautier256 <g.mekhelian@gmail.com> 1729072052 +0200	commit: Upload Extension
eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 MrGautier256 <g.mekhelian@gmail.com> 1729512478 +0200	checkout: moving from main to Feat/Dark-mode


.git\logs\refs\heads\main
0000000000000000000000000000000000000000 d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 MrGautier256 <g.mekhelian@gmail.com> 1729064409 +0200	clone: from https://github.com/MrGautier256/webtoons-full-loader.git
d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 MrGautier256 <g.mekhelian@gmail.com> 1729072052 +0200	commit: Upload Extension


.git\logs\refs\heads\Feat\Dark-mode
0000000000000000000000000000000000000000 eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 MrGautier256 <g.mekhelian@gmail.com> 1729512478 +0200	branch: Created from main


.git\logs\refs\remotes\origin\HEAD
0000000000000000000000000000000000000000 d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 MrGautier256 <g.mekhelian@gmail.com> 1729064409 +0200	clone: from https://github.com/MrGautier256/webtoons-full-loader.git
d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 gautier mekhelian <Gautier@Portable-Gautier.(none)> 1729064729 +0200	remote set-head
d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 gautier mekhelian <Gautier@Portable-Gautier.(none)> 1729066616 +0200	remote set-head
d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 gautier mekhelian <Gautier@Portable-Gautier.(none)> 1729068501 +0200	remote set-head
d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 gautier mekhelian <Gautier@Portable-Gautier.(none)> 1729070385 +0200	remote set-head
eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 gautier mekhelian <Gautier@Portable-Gautier.(none)> 1729072057 +0200	remote set-head
eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 gautier mekhelian <Gautier@Portable-Gautier.(none)> 1729512485 +0200	remote set-head


.git\logs\refs\remotes\origin\main
d065039b17fcdc0cc8ddcd84da24bc90a27d27f9 eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 MrGautier256 <g.mekhelian@gmail.com> 1729072055 +0200	update by push


.git\logs\refs\remotes\origin\Feat\Dark-mode
0000000000000000000000000000000000000000 eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067 MrGautier256 <g.mekhelian@gmail.com> 1729512484 +0200	update by push


.git\objects\1d\bf11fc34227eed26a2fd9d14f2e12f7bf2ccef
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

.git\objects\2c\19429af1a0219cd3b76f42c1cdedac58a191a0
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

.git\objects\4a\932a2ff64014133011e55c777d8a9a30b939d3
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xd4 in position 2: invalid continuation byte

.git\objects\5d\1aa9322ac1bb9300d6d0114d58b16e3c3c7b66
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

.git\objects\60\c5a4fcc8d35f04088248cc2b0e82104d1df4d4
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte

.git\objects\6f\53aab1b297e8ad9635e8d687beded25bc79f2e
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

.git\objects\7a\1addb9db26b884e0458e0d787f49c4e5f28a5f
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0x97 in position 3: invalid start byte

.git\objects\8f\b5473c2d08a939efe062799a8d77ee9dee980b
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte

.git\objects\9d\27fe8dac420278d446147e1b69256ca75ba37e
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

.git\objects\a4\0395feb4c1c7f605fc8e172ae8f4de9fd2d989
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xec in position 2: invalid continuation byte

.git\objects\b7\9aea5683b756a416798f8ee70d1cd50d585f65
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte

.git\objects\ce\bf3b871c2941857de0329877add74620e9ade9
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte

.git\objects\d2\496eaeeba265e56389494464b38d2b63611ab0
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xb6 in position 8: invalid start byte

.git\objects\d2\ee2949e214eb4ea3e05a4753ee91a496e951a3
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

.git\objects\db\0bb3d9e997b39330d3314acbe849bbd893e680
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

.git\objects\dc\0c58628a745d92fc7482f1ff4fb08fbce76bc4
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

.git\objects\eb\2322f97f0e06fc00fbb99cc98f3bfb85dcb067
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

.git\objects\pack\pack-b802cf59ee63599c3384c88df413b850b834e84b.idx
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

.git\objects\pack\pack-b802cf59ee63599c3384c88df413b850b834e84b.pack
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0x90 in position 12: invalid start byte

.git\objects\pack\pack-b802cf59ee63599c3384c88df413b850b834e84b.rev
Erreur de lecture du fichier: 'utf-8' codec can't decode byte 0xb8 in position 28: invalid start byte

.git\refs\heads\main
eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067


.git\refs\heads\Feat\Dark-mode
eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067


.git\refs\remotes\origin\HEAD
ref: refs/remotes/origin/main


.git\refs\remotes\origin\main
eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067


.git\refs\remotes\origin\Feat\Dark-mode
eb2322f97f0e06fc00fbb99cc98f3bfb85dcb067


popup\popup.html
<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Webtoons Full Loader</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f5f5f5;
      color: #333;
      min-width: 220px;
      padding: 20px;
      border-radius: 8px;
    }

    .switch-container {
      display: flex;
      align-items: center;
      justify-content: space-between;
      font-size: 16px;
      font-weight: bold;
      margin-bottom: 10px;
    }

    .switch {
      position: relative;
      display: inline-block;
      width: 50px;
      height: 24px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: 0.4s;
      border-radius: 24px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 20px;
      width: 20px;
      left: 2px;
      bottom: 2px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%;
    }

    input:checked+.slider {
      background-color: #4caf50;
    }

    input:checked+.slider:before {
      transform: translateX(26px);
    }

    @media (prefers-color-scheme: dark) {
      body {
        background-color: #222;
        color: #eee;
      }

      .slider {
        background-color: #777;
      }

      input:checked+.slider {
        background-color: #0a7f12;
      }
    }
  </style>
</head>

<body>
  <div class="switch-container">
    <span id="status">Disabled</span>
    <label class="switch">
      <input type="checkbox" id="toggleExtension" />
      <span class="slider"></span>
    </label>
  </div>
  <script src="../scripts/popup.js"></script>
</body>

</html>

scripts\contentScript.js
// scripts/contentScript.js

// Main function encapsulated to avoid variable conflicts
(function () {
  // Check if the extension is enabled
  chrome.storage.sync.get(["enabled"], function (result) {
    if (result.enabled === false) {
      // If the extension is disabled, do nothing
      return;
    }

    // Add an event listener to detect when the page is fully loaded
    window.addEventListener("load", function () {
      // Initialize variables
      let lastHeight = document.body.scrollHeight;

      // Function to scroll to the bottom of the page
      function scrollToBottom() {
        window.scrollTo(0, document.body.scrollHeight);
      }

      // Scroll the page to load dynamic content
      let timer = setInterval(function () {
        scrollToBottom();

        // Check if new content has been loaded
        let newHeight = document.body.scrollHeight;
        if (newHeight > lastHeight) {
          lastHeight = newHeight;
        } else {
          // If no new content, stop scrolling
          clearInterval(timer);
          // Scroll back to the top of the page
          window.scrollTo(0, 0);
        }
      }, 500); // Reduced interval for faster processing
    });
  });
})();


scripts\popup.js
// scripts/popup.js

const toggle = document.getElementById("toggleExtension");
const statusText = document.getElementById("status");

chrome.storage.sync.get(["enabled"], function (result) {
  const isEnabled = result.enabled !== undefined ? result.enabled : true;
  toggle.checked = isEnabled;
  statusText.textContent = isEnabled ? "Enabled" : "Disabled";
});

toggle.addEventListener("change", function () {
  const isEnabled = toggle.checked;
  chrome.storage.sync.set({ enabled: isEnabled });
  statusText.textContent = isEnabled ? "Enabled" : "Disabled";
});


